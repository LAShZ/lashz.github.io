<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Lavch&#39;s blog</title>
        <link>https://example.com/</link>
        <description>Recent content on Lavch&#39;s blog</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>en-us</language>
        <lastBuildDate>Wed, 30 Dec 2020 17:45:11 +0800</lastBuildDate><atom:link href="https://example.com/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>Go语言学习之旅(一)</title>
        <link>https://example.com/p/go%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E4%B9%8B%E6%97%85%E4%B8%80/</link>
        <pubDate>Wed, 30 Dec 2020 17:45:11 +0800</pubDate>
        
        <guid>https://example.com/p/go%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E4%B9%8B%E6%97%85%E4%B8%80/</guid>
        <description>&lt;h1 id=&#34;go语言学习之旅&#34;&gt;Go语言学习之旅&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;计算机咸鱼自救之路&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;本文是用于记录作者在Go语言的学习过程中经历的种种，并用于日后复习与为他人提供些许的经验参考。&lt;/p&gt;
&lt;p&gt;本文开始于作者大三寒假时期，对于数据结构、算法、计算机网络等知识都有一定的了解，也有过一定的项目经验，故一些较为基础的知识不再予以记录，如若读者遇到了难以理解的部分，可以上网自行寻找相关的资料，若仍然无法理解，请联系作者加以解释。也欢迎各位对本文中出现的错误以及不足之处予以指正。&lt;/p&gt;
&lt;p&gt;转载请注明出处。&lt;/p&gt;
&lt;h2 id=&#34;go语言的安装&#34;&gt;GO语言的安装&lt;/h2&gt;
&lt;h3 id=&#34;windows下的安装&#34;&gt;&lt;em&gt;Windows下的安装&lt;/em&gt;&lt;/h3&gt;
&lt;p&gt;由于本文作者主要使用的操作系统仍是Windows（没钱买Mac），故首先尝试的是在Windows下安装GO。&lt;/p&gt;
&lt;p&gt;进入&lt;a class=&#34;link&#34; href=&#34;https://golang.org/dl/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;GO语言官方下载地址&lt;/a&gt;，点击Microsoft Windows下方的下载链接自动下载最新的GO语言稳定版安装器。下载完成后运行后选择Install即可完成安装。&lt;/p&gt;
&lt;p&gt;若安装过Windows下的包管理器如&lt;em&gt;Scoop&lt;/em&gt;、&lt;em&gt;Chocolatey&lt;/em&gt;等，也可以以使用指令：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;scoop install go
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;或是&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;choco install go
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;进行安装。&lt;/p&gt;
&lt;h3 id=&#34;linux下的安装&#34;&gt;Linux下的安装&lt;/h3&gt;
&lt;p&gt;本文作者目前使用的Linux发行版为Debian系下的Ubuntu 18.04和Deepin 20，故使用的指令均为Debian系下的操作。&lt;/p&gt;
&lt;p&gt;直接打开终端，输入&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;sudo apt install golang
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;即可完成安装。&lt;/p&gt;
&lt;h2 id=&#34;go语言的ide&#34;&gt;GO语言的IDE&lt;/h2&gt;
&lt;p&gt;一个好的IDE可以使代码的编写事半功倍。本文作者使用的IDE为JetBrains推出的GoLand，平时对于小型代码的编写也会使用Visual Studio Code配上Go语言插件直接进行编写。&lt;/p&gt;
&lt;p&gt;两个软件的下载安装配置工作请读者自行学习，本文不再赘述。&lt;/p&gt;
&lt;h2 id=&#34;go语言的语法基础&#34;&gt;GO语言的语法基础&lt;/h2&gt;
&lt;p&gt;Go语言作为21世纪的C语言，许多语法特性与C语言类似，如需要对每个变量的类型都进行声明等，本文不对Go语言的语法基础细节做过多的说明，对于一些基本的语法使用只需参照官方文档或是任意一本参考书即可，本文只对作者学习过程中遇到的较为难以理解或是复杂的概念做一个记录说明。&lt;/p&gt;
&lt;h3 id=&#34;变量与常量声明&#34;&gt;变量与常量声明&lt;/h3&gt;
&lt;p&gt;Go的常量声明使用&lt;code&gt;const&lt;/code&gt;关键字：&lt;code&gt;const identifier [type] = value&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Go的变量声明使用&lt;code&gt;var&lt;/code&gt;关键字：&lt;code&gt;var identifier type&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;可以注意到的是，Go语言的变量声明与其他语言最为不同的一点是，&lt;strong&gt;类型放在变量名之后&lt;/strong&gt;，这点在之后的各个地方都会被使用到，也是新手学习Go语言要跨过的第一个障碍。下面给出几个Go语言声明变量的例子：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-Go&#34; data-lang=&#34;Go&#34;&gt;&lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;a&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;
&lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;c&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;
&lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;d&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;bool&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;// 使用因式分解关键字写法，一般用于全局变量
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;
	&lt;span class=&#34;nx&#34;&gt;str&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;string&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;array&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[]&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;可以看出这样声明可以使得变量的类型定义清晰，每一行声明的变量都一定是同一个类型的。&lt;/p&gt;
&lt;p&gt;Go语言的 变量命名需要遵循骆驼命名法，如&lt;code&gt;myArray&lt;/code&gt;和&lt;code&gt;startDate&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;Go语言的变量在声明的时候会被赋予该类型的初值：int为0，float为0.0，bool为false，string为空字符串，指针为nil。Go中所有的变量都是经过&lt;strong&gt;初始化&lt;/strong&gt;的。Go语言也支持变量在声明的时候进行初始化。同时，若在初始化时不指定类型，Go语言会根据初始化的值自动判断类型，但是没有初始化值且没有类型的变量声明是不被允许的。&lt;/p&gt;
&lt;p&gt;由于自动判断特性，Go语言在声明时支持简短声明语法&lt;code&gt;:=&lt;/code&gt;，如&lt;code&gt;a := 1&lt;/code&gt;，此时a自动被初始化成int型的变量，且值为1。（该种用法只能在一个代码块内对同一个变量名使用一次）&lt;/p&gt;
&lt;p&gt;Go语言也支持对多个变量同时声明或是同时赋值&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span class=&#34;nx&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;c&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;7&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;abc&amp;#34;&lt;/span&gt;	&lt;span class=&#34;c1&#34;&gt;//变量之前未被声明
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;d&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;e&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;f&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;def&amp;#34;&lt;/span&gt;	&lt;span class=&#34;c1&#34;&gt;//变量之前已被声明
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;b&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;a&lt;/span&gt;	&lt;span class=&#34;c1&#34;&gt;//交换两个变量的值
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;_&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;b&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;7&lt;/span&gt;	&lt;span class=&#34;c1&#34;&gt;//使用只写变量&amp;#34;_&amp;#34;抛弃值
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;最后，在每个源文件中都支持包含一个init函数，支持对全局变量的初始化。这是一类非常特殊的函数，它不能够被人为调用，而是在每个包完成初始化后自动执行，并且执行优先级比 main 函数高。如下面的例子中便将Pi初始化为了3.1415&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;Pi&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;float64&lt;/span&gt;

&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;init&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
   &lt;span class=&#34;nx&#34;&gt;Pi&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;3.1415&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;字符串&#34;&gt;字符串&lt;/h3&gt;
&lt;p&gt;与Python字符串类似，支持&lt;code&gt;+&lt;/code&gt;拼接字符串，支持len(str)获取字符串长度，也支持str[]获取内容。若是导入了&lt;code&gt;strings&lt;/code&gt;包或是&lt;code&gt;strconv&lt;/code&gt;包则支持更多的特性。相关的函数接口功能参照该&lt;a class=&#34;link&#34; href=&#34;https://github.com/unknwon/the-way-to-go_ZH_CN/blob/master/eBook/04.7.md&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;链接&lt;/a&gt;，做了较为详细的说明。&lt;/p&gt;
</description>
        </item>
        
    </channel>
</rss>
